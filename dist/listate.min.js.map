{"version":3,"sources":["../src/listate.js"],"names":["baseWhen","state","prevState","run","func","context","param","once","call","unlisten","listen","store","listener","settings","handle","data","filter","_typeof","delay","when","getState","prev","timeoutId","subscribe","current","dispatch","clearTimeout","setTimeout"],"mappings":"qNAgEO,SAASA,GAASC,EAAOC,GAC5B,MAAOD,KAAUC,EAIrB,QAASC,GAAIC,EAAMC,EAASC,EAAOC,GAC/B,MAAO,YACHH,EAAKI,KAAKH,EAASC,GACfC,GACAD,EAAMG,YA4DH,QAASC,GAAOC,EAAOC,GAClC,GAAMC,GAA+B,kBAAbD,IACDE,OAAQF,GACTA,EACdE,EAA+BD,EAA/BC,OAAQC,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,OAAQT,EAASM,EAATN,KAC1BF,EAAUQ,EAASR,SAAW,IAC9BA,IAA8B,gBAAnB,KAAOA,EAAP,YAAAY,EAAOZ,MAClBA,EAAUO,EAEd,IAAMM,GAAkC,gBAAnBL,GAASK,MACZL,EAASK,OACR,EACbC,EAAON,EAASM,MAAQnB,EAC1BE,EAAYS,EAAMS,WAClBC,EAAOL,EACOA,EAAOd,GACPA,EACdoB,MAAAA,GAEEb,EAAWE,EAAMY,UAAU,WAC7B,GAAMtB,GAAQU,EAAMS,WACdI,EAAUR,EACMA,EAAOf,GACPA,EAChBK,GACFkB,QAAAA,EACAH,KAAAA,EACApB,MAAAA,EACAC,UAAAA,EACAa,KAAAA,EACAJ,MAAAA,EACAc,SAAUd,EAAMc,SAChBhB,SAAAA,EAEJP,GAAYD,EACRkB,EAAKK,EAASH,EAAMf,IAAUQ,GAC9BO,EAAOG,EACHN,EAAQ,GACRJ,EAAON,KAAKH,EAASC,GACjBC,GACAE,MAIJiB,aAAaJ,GACbA,EAAYK,WAAWxB,EAAIW,EAAQT,EAASC,EAAOC,GAAOW,KAI9DG,EAAOG,GAIf,OAAOf,qBA1HKT,SAAAA,YAqEQU,oNAwDfA,OAAAA","sourcesContent":["/*\r\n * listate\r\n * https://github.com/gamtiq/listate\r\n *\r\n * Copyright (c) 2017-2018 Denis Sikuler\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/* global clearTimeout, setTimeout */\r\n\r\n/**\r\n * Library for listening on changes of Redux store state.\r\n * \r\n * @module listate\r\n */\r\n\r\n/**\r\n * Store object.\r\n *\r\n * @typedef {Object} Store\r\n *\r\n * @property {Function} dispatch\r\n *      Dispatches an action to trigger a state change.\r\n * @property {Function} getState\r\n *      Returns the current state.\r\n * @property {Function} subscribe\r\n *      Adds a change listener.\r\n */\r\n\r\n/**\r\n * Parameter that is passed when calling the listener.\r\n *\r\n * @typedef {Object} HandleParam\r\n *\r\n * @property {any} current\r\n *      The current state or a part of the current state if `filter` is set.\r\n * @property {any} data\r\n *      The auxiliary data (value of `listener.data` parameter).\r\n * @property {Function} dispatch\r\n *      Reference to `dispatch` method of the store.\r\n * @property {any} prev\r\n *      The previous state or a part of the previous state if `filter` is set.\r\n * @property {object} prevState\r\n *      The previous state.\r\n * @property {object} state\r\n *      The current state.\r\n * @property {module:listate~Store} store\r\n *      The store for which listener is registered.\r\n * @property {Function} unlisten\r\n *      The function that removes/unsubscribes the listener.\r\n */\r\n\r\n/**\r\n * Check whether current value (state) is not equal previous value (state).\r\n *\r\n * Uses `!==` for comparison.\r\n *\r\n * @param {object} state\r\n *      A current value (state).\r\n * @param {object} prevState\r\n *      A previous value (state).\r\n * @return {boolean}\r\n *      `true` if current value is not equal previous value.\r\n */\r\nexport function baseWhen(state, prevState) {\r\n    return state !== prevState;\r\n}\r\n\r\n// eslint-disable-next-line max-params, require-jsdoc\r\nfunction run(func, context, param, once) {\r\n    return () => {\r\n        func.call(context, param);\r\n        if (once) {\r\n            param.unlisten();\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Add/register state change listener for the given store.\r\n *\r\n * @example\r\n * import listen from 'listate';\r\n *\r\n * const store = createStore(reducer, initState);\r\n *\r\n * listen(store, {\r\n *     filter: (state) => state.section,\r\n *     when: (current, prev) => current !== prev && current !== 'exit',\r\n *     delay: 1000,\r\n *     handle: (data) => {\r\n *         // data.current === state.section\r\n *         localStorage.setItem('selectedSection', data.current);\r\n *     }\r\n * });\r\n *\r\n * @param {module:listate~Store} store\r\n *      Store for which listener should be added/registered.\r\n * @param {Function | object} listener\r\n *      Specifies listener that should be called on a state change.\r\n *      Can be a function or an object that defines listener settings/details.\r\n * @param {Function} listener.handle\r\n *      Listener that should be called on a state change.\r\n * @param {boolean | object} [listener.context]\r\n *      Object that should be used as `this` value when calling the listener.\r\n *      When `true` is passed `listener` object will be used as `this`.\r\n *      False value (by default) means that `null` will be used as the context object.\r\n * @param {any} [listener.data]\r\n *      Any data that should be passed into the listener.\r\n * @param {number} [listener.delay]\r\n *      Specifies that listener should be called after the given number of milliseconds have elapsed.\r\n *      Works similar to `debounce`: when several requests for the listener call arrive during the specified period\r\n *      only the last one will be applied after the timeout.\r\n *      `0` is acceptable value that means the listener should be called asynchronuosly.\r\n *      Negative number means that the listener should be called without delay.\r\n * @param {Function} [listener.filter=(state) => state]\r\n *      Function (selector) to extract state part which will be used inside `when` to determine\r\n *      whether the listener should be called. By default the entire state will be used.\r\n * @param {boolean} [listener.once=false]\r\n *      Whether the listener should be called just once.\r\n * @param {Function} [listener.when=baseWhen]\r\n *      Function to determine whether the listener should be called.\r\n *      The listener will be called if the function returns true.\r\n *      The following parameters will be passed into the function:\r\n *\r\n *    * the current state or a part of the current state if `filter` is set.\r\n *    * the previous state or a part of the previous state if `filter` is set.\r\n *    * an object that will be passed into listener.\r\n *\r\n * @return {Function}\r\n *      A function that removes/unsubscribes the listener.\r\n * @alias module:listate.listen\r\n */\r\nexport default function listen(store, listener) {\r\n    const settings = typeof listener === 'function'\r\n                        ? {handle: listener}\r\n                        : listener;\r\n    const { handle, data, filter, once } = settings;\r\n    let context = settings.context || null;\r\n    if (context && typeof context !== 'object') {\r\n        context = listener;\r\n    }\r\n    const delay = typeof settings.delay === 'number'\r\n                    ? settings.delay\r\n                    : -1;\r\n    const when = settings.when || baseWhen;\r\n    let prevState = store.getState();\r\n    let prev = filter\r\n                    ? filter(prevState)\r\n                    : prevState;\r\n    let timeoutId;\r\n    \r\n    const unlisten = store.subscribe(() => {\r\n        const state = store.getState();\r\n        const current = filter\r\n                            ? filter(state)\r\n                            : state;\r\n        const param = {\r\n            current,\r\n            prev,\r\n            state,\r\n            prevState,\r\n            data,\r\n            store,\r\n            dispatch: store.dispatch,\r\n            unlisten\r\n        };\r\n        prevState = state;\r\n        if (when(current, prev, param) && handle) {\r\n            prev = current;\r\n            if (delay < 0) {\r\n                handle.call(context, param);\r\n                if (once) {\r\n                    unlisten();\r\n                }\r\n            }\r\n            else {\r\n                clearTimeout(timeoutId);\r\n                timeoutId = setTimeout(run(handle, context, param, once), delay);\r\n            }\r\n        }\r\n        else {\r\n            prev = current;\r\n        }\r\n    });\r\n\r\n    return unlisten;\r\n}\r\n\r\nexport { listen };\r\n"]}