{"version":3,"sources":["../src/listate.js"],"names":["baseWhen","state","prevState","listen","store","listener","settings","handle","context","data","filter","when","getState","prev","unlisten","subscribe","current","param","dispatch","call"],"mappings":"qNA8DO,SAASA,GAASC,EAAOC,GAC5B,MAAOD,KAAUC,EA8CN,QAASC,GAAOC,EAAOC,GAClC,GAAMC,GAA+B,kBAAbD,IACDE,OAAQF,GACTA,EACdE,EAAkCD,EAAlCC,OAAQC,EAA0BF,EAA1BE,QAASC,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OACzBC,EAAOL,EAASK,MAAQX,EAC1BE,EAAYE,EAAMQ,WAClBC,EAAOH,EACOA,EAAOR,GACPA,EAEZY,EAAWV,EAAMW,UAAU,WAC7B,GAAMd,GAAQG,EAAMQ,WACdI,EAAUN,EACMA,EAAOT,GACPA,EAChBgB,GACFD,QAAAA,EACAH,KAAAA,EACAZ,MAAAA,EACAC,UAAAA,EACAO,KAAAA,EACAL,MAAAA,EACAc,SAAUd,EAAMc,SAChBJ,SAAAA,EAEJZ,GAAYD,EACRU,EAAKK,EAASH,EAAMI,IAAUV,GAC9BM,EAAOG,EACPT,EAAOY,KAAKX,GAAW,KAAMS,IAG7BJ,EAAOG,GAIf,OAAOF,qBAnFKd,SAAAA,YA+CQG,IAuCfA,OAAAA","sourcesContent":["/*\r\n * listate\r\n * https://github.com/gamtiq/listate\r\n *\r\n * Copyright (c) 2017 Denis Sikuler\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * Library for listening on changes of Redux store state.\r\n * \r\n * @module listate\r\n */\r\n\r\n/**\r\n * Store object.\r\n *\r\n * @typedef {Object} Store\r\n *\r\n * @property {Function} dispatch\r\n *      Dispatches an action to trigger a state change.\r\n * @property {Function} getState\r\n *      Returns the current state.\r\n * @property {Function} subscribe\r\n *      Adds a change listener.\r\n */\r\n\r\n/**\r\n * Parameter that is passed when calling the listener.\r\n *\r\n * @typedef {Object} HandleParam\r\n *\r\n * @property {any} current\r\n *      The current state or a part of the current state if `filter` is set.\r\n * @property {any} data\r\n *      The auxiliary data (value of `listener.data` parameter).\r\n * @property {Function} dispatch\r\n *      Reference to `dispatch` method of the store.\r\n * @property {any} prev\r\n *      The previous state or a part of the previous state if `filter` is set.\r\n * @property {object} prevState\r\n *      The previous state.\r\n * @property {object} state\r\n *      The current state.\r\n * @property {Store} store\r\n *      The store for which listener is registered.\r\n * @property {Function} unlisten\r\n *      The function that removes/unsubscribes the listener.\r\n */\r\n\r\n/**\r\n * Check whether current value (state) is no equal previous value (state).\r\n *\r\n * Uses `!==` for comparison.\r\n *\r\n * @param {object} state\r\n *      A current value (state).\r\n * @param {object} prevState\r\n *      A previous value (state).\r\n * @return {boolean}\r\n *      `true` if current value is no equal previous value.\r\n */\r\nexport function baseWhen(state, prevState) {\r\n    return state !== prevState;\r\n}\r\n\r\n/**\r\n * Add/register state change listener for the given store.\r\n *\r\n * @example\r\n * import listen from 'listate';\r\n *\r\n * const store = createStore(reducer, initState);\r\n *\r\n * listen(store, {\r\n *     filter: (state) => state.section,\r\n *     when: (current, prev) => current !== prev && current !== 'exit',\r\n *     handle: (data) => {\r\n *         // data.current === state.section\r\n *         localStorage.setItem('selectedSection', data.current);\r\n *     }\r\n * });\r\n *\r\n * @param {Store} store\r\n *      Store for which listener should be added/registered.\r\n * @param {Function | object} listener\r\n *      Specifies listener that should be called on a state change.\r\n *      Can be a function or an object that defines listener settings/details.\r\n * @param {Function} listener.handle\r\n *      Listener that should be called on a state change.\r\n * @param {object} [listener.context]\r\n *      Object that should be used as `this` value when calling the listener.\r\n * @param {any} [listener.data]\r\n *      Any data that should be passed into the listener.\r\n * @param {Function} [listener.filter=(state) => state]\r\n *      Function (selector) to extract state part which will be used inside `when` to determine\r\n *      whether the listener should be called. By default the entire state will be used.\r\n * @param {Function} [listener.when=baseWhen]\r\n *      Function to determine whether the listener should be called.\r\n *      The listener will be called if the function returns true.\r\n *      The following parameters will be passed into the function:\r\n *\r\n *    * the current state or a part of the current state if `filter` is set.\r\n *    * the previous state or a part of the previous state if `filter` is set.\r\n *    * an object that will be passed into listener.\r\n *\r\n * @return {Function}\r\n *      A function that removes/unsubscribes the listener.\r\n */\r\nexport default function listen(store, listener) {\r\n    const settings = typeof listener === 'function'\r\n                        ? {handle: listener}\r\n                        : listener;\r\n    const { handle, context, data, filter } = settings;\r\n    const when = settings.when || baseWhen;\r\n    let prevState = store.getState();\r\n    let prev = filter\r\n                    ? filter(prevState)\r\n                    : prevState;\r\n    \r\n    const unlisten = store.subscribe(() => {\r\n        const state = store.getState();\r\n        const current = filter\r\n                            ? filter(state)\r\n                            : state;\r\n        const param = {\r\n            current,\r\n            prev,\r\n            state,\r\n            prevState,\r\n            data,\r\n            store,\r\n            dispatch: store.dispatch,\r\n            unlisten\r\n        };\r\n        prevState = state;\r\n        if (when(current, prev, param) && handle) {\r\n            prev = current;\r\n            handle.call(context || null, param);\r\n        }\r\n        else {\r\n            prev = current;\r\n        }\r\n    });\r\n\r\n    return unlisten;\r\n}\r\n\r\nexport { listen };\r\n"]}