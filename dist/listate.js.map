{"version":3,"sources":["../src/listate.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;YAuCgB,Q,GAAA,Q;sBA6CQ,M;AApFxB;;;;;;;;AAQA;;;;;;AAMA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;AAYO,aAAS,QAAT,CAAkB,KAAlB,EAAyB,SAAzB,EAAoC;AACvC,eAAO,UAAU,SAAjB;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCe,aAAS,MAAT,CAAgB,KAAhB,EAAuB,QAAvB,EAAiC;AAC5C,YAAM,WAAW,OAAO,QAAP,KAAoB,UAApB,GACK,EAAC,UAAU,QAAX,EADL,GAEK,QAFtB;AAD4C,YAIpC,QAJoC,GAIN,QAJM,CAIpC,QAJoC;AAAA,YAI1B,OAJ0B,GAIN,QAJM,CAI1B,OAJ0B;AAAA,YAIjB,MAJiB,GAIN,QAJM,CAIjB,MAJiB;;AAK5C,YAAM,OAAO,SAAS,IAAT,IAAiB,QAA9B;AACA,YAAI,YAAY,MAAM,QAAN,EAAhB;;AAEA,YAAM,WAAW,MAAM,SAAN,CAAgB,YAAM;AACnC,gBAAM,QAAQ,MAAM,QAAN,EAAd;AACA,gBAAM,UAAU,SACM,OAAO,KAAP,CADN,GAEM,KAFtB;AAGA,gBAAM,OAAO,SACK,OAAO,SAAP,CADL,GAEK,SAFlB;AAGA,gBAAM,QAAQ;AACV,gCADU;AAEV,0BAFU;AAGV,4BAHU;AAIV,oCAJU;AAKV,4BALU;AAMV,0BAAU,MAAM,QANN;AAOV;AAPU,aAAd;AASA,wBAAY,KAAZ;AACA,gBAAI,KAAK,OAAL,EAAc,IAAd,EAAoB,KAApB,KAA8B,QAAlC,EAA4C;AACxC,yBAAS,IAAT,CAAc,WAAW,IAAzB,EAA+B,KAA/B;AACH;AACJ,SArBgB,CAAjB;;AAuBA,eAAO,QAAP;AACH;;YAEQ,M,GAAA,M","file":"listate.js","sourcesContent":["/*\r\n * listate\r\n * https://github.com/gamtiq/listate\r\n *\r\n * Copyright (c) 2017 Denis Sikuler\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * Library for listening on changes of Redux store state.\r\n * \r\n * @module listate\r\n */\r\n\r\n/**\r\n * Store object.\r\n *\r\n * @typedef {Object} Store\r\n *\r\n * @property {Function} dispatch\r\n *      Dispatches an action to trigger a state change.\r\n * @property {Function} getState\r\n *      Returns the current state.\r\n * @property {Function} subscribe\r\n *      Adds a change listener.\r\n */\r\n\r\n/**\r\n * Check whether current value (state) is no equal previous value (state).\r\n *\r\n * Uses `!==` for comparison.\r\n *\r\n * @param {object} state\r\n *      A current value (state).\r\n * @param {object} prevState\r\n *      A previous value (state).\r\n * @return {boolean}\r\n *      `true` if current value is no equal previous value.\r\n */\r\nexport function baseWhen(state, prevState) {\r\n    return state !== prevState;\r\n}\r\n\r\n/**\r\n * Add/register state change listener for the given store.\r\n *\r\n * @example\r\n * import listen from 'listate';\r\n *\r\n * const store = createStore(reducer, initState);\r\n *\r\n * listen(store, {\r\n *     filter: (state) => state.section,\r\n *     when: (current, prev) => current !== prev && current !== 'exit',\r\n *     callback: (data) => {\r\n *         // data.current === state.section\r\n *         localStorage.setItem('selectedSection', data.current);\r\n *     }\r\n * });\r\n *\r\n * @param {Store} store\r\n *      Store for which listener should be added/registered.\r\n * @param {Function | object} listener\r\n *      Specifies listener that should be called on a state change.\r\n *      Can be a function or an object that defines listener settings/details.\r\n * @param {Function} listener.callback\r\n *      Listener that should be called on a state change.\r\n * @param {object} [listener.context]\r\n *      Object that should be used as `this` value when calling the listener.\r\n * @param {Function} [listener.filter=(state) => state]\r\n *      Function (selector) to extract state part which will be used inside `when` to determine\r\n *      whether the listener should be called. By default the entire state will be used.\r\n * @param {Function} [listener.when=baseWhen]\r\n *      Function to determine whether the listener should be called.\r\n *      The listener will be called if the function returns true.\r\n *      The following parameters will be passed into the function:\r\n *\r\n *    * the current state or a part of the current state if `filter` is set.\r\n *    * the previous state or a part of the previous state if `filter` is set.\r\n *    * an object that will be passed into listener.\r\n *\r\n * @return {Function}\r\n *      A function that removes/unsubscribes the listener.\r\n */\r\nexport default function listen(store, listener) {\r\n    const settings = typeof listener === 'function'\r\n                        ? {callback: listener}\r\n                        : listener;\r\n    const { callback, context, filter } = settings;\r\n    const when = settings.when || baseWhen;\r\n    let prevState = store.getState();\r\n    \r\n    const unlisten = store.subscribe(() => {\r\n        const state = store.getState();\r\n        const current = filter\r\n                            ? filter(state)\r\n                            : state;\r\n        const prev = filter\r\n                        ? filter(prevState)\r\n                        : prevState;\r\n        const param = {\r\n            current,\r\n            prev,\r\n            state,\r\n            prevState,\r\n            store,\r\n            dispatch: store.dispatch,\r\n            unlisten\r\n        };\r\n        prevState = state;\r\n        if (when(current, prev, param) && callback) {\r\n            callback.call(context || null, param);\r\n        }\r\n    });\r\n\r\n    return unlisten;\r\n}\r\n\r\nexport { listen };\r\n"]}